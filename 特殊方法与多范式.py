# python3
#  _*_ coding: utf-8 _*_
# _author_ = 'YourName'

# Python 一切皆对象，但同时，Python还是一个多范式语言(multi-paradigm),
# 你不仅可以使用面向对象的方式来编写程序，
# 还可以用面向过程的方式来编写相同功能的程序(还有函数式、声明式等，我们暂不深入)。
# Python的多范式依赖于Python对象中的特殊方法(special method)。

"""多范式是指 你可以使用多种方式来编写程序 """

# 特殊方法名的前后各有两个下划线。特殊方法又被成为魔法方法(magic method)，
# 定义了许多Python 语法和表达方式，正如我们在下面的例子中将要看到的。
# 当对象中定义了特殊方法的时候，Python也会对它们有“特殊优待”。
# 比如定义了__init__()方法的类，会在创建对象的时候自动执行__init__()方法中的操作。

""" 特殊方法 __方法()__  可以通过dir()来查看对象所拥有的特殊方法，比如dir(1)"""
"""——————————————————1、运算符————————————————————"""
print("""——————————————————1、运算符————————————————————""")
var1 = 'abc' + 'xyz'  # 连接字符串     起到简化的作用
var2 = 'abc'.__add__('xyz')  # 与上面的等价
print(var1, var2)

# 一旦相应的对象有__add__()方法，即使这个对象从数学上不可加，
# 我们都可以用加法的形式，来表达obj.__add__()所定义的操作。
# 在Python中，运算符起到简化书写的功能，但它依靠特殊方法实现。


"""——————————————————2、内置函数————————————————————"""
print("""——————————————————2、内置函数————————————————————""")
print(len([1, 2, 3]), [1, 2, 3].__len__())  # 相对与__len__()，内置函数len()也起到了简化书写的作用。

"""——————————————————3、表元素引用——————————————————"""
print("""——————————————————3、表元素引用————————————————————""")
li = [1, 2, 3, 4, 5, 6]
print(li[3], li.__getitem__(3))

"""——————————————————4函数————————————————————————"""
print("""——————————————————4函数————————————————————————""")


class SampleMore(object):
    def __call__(self, a):
        return a + 5
